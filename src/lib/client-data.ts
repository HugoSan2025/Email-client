
interface Client {
  code: string;
  name: string;
  emails: string[];
}

let allClients: Client[] = [];
let clientsLoaded = false;

// This function fetches all client data parts and combines them.
// It ensures data is loaded only once.
export async function getClients(): Promise<Client[]> {
  if (clientsLoaded) {
    return allClients;
  }

  try {
    // Adjust the range based on the number of files generated by the script.
    // Let's assume a maximum of 30 parts, which covers up to 15,000 clients.
    const fileParts = Array.from({ length: 30 }, (_, i) => i + 1);
    
    const fetchPromises = fileParts.map(part =>
      fetch(`/client-data/part-${part}.json`)
        .then(res => {
          if (res.ok) {
            return res.json();
          }
          // If a file part doesn't exist (e.g., fewer than 30 parts), we return an empty array.
          return []; 
        })
        .catch(() => []) // Also return empty array on network error
    );

    const clientArrays = await Promise.all(fetchPromises);
    
    allClients = clientArrays.flat();
    clientsLoaded = true;
    
    console.log(`Loaded ${allClients.length} clients.`);
    return allClients;
  } catch (error) {
    console.error("Failed to load client data:", error);
    clientsLoaded = false; // Allow retrying if it failed
    return [];
  }
}
